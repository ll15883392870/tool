# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\weatherui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import random
import sys
import time
import json

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget
import requests
from utils import Headers


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(420, 80, 81, 31))
        self.pushButton.setObjectName("pushButton")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(280, 80, 131, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(370, 40, 101, 31))
        self.label.setObjectName("label")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(510, 80, 81, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(230, 80, 41, 31))
        self.label_2.setObjectName("label_2")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(230, 120, 361, 281))
        self.textBrowser.setObjectName("textBrowser")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.pushButton.clicked.connect(self.query)
        self.pushButton_2.clicked.connect(self.local_query)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def query(self):
        query_text = self.lineEdit.text()  # 城市名
        if len(query_text.strip()) != 0:
            try:
                self.get(query_text)
            except Exception as e:
                self.textBrowser.setText("查询出错！")

    def local_query(self):
        url = "https://ip.cn/api/index?ip=&type=0"  # 也可以直接在浏览器访问这个地址
        r = requests.get(url)  # 获取返回的值
        ip = r.json()["ip"]  # 取其中某个字段的值
        # print(ip)
        # 发送get请求
        url = f'http://ip-api.com/json/{ip}?fields=status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query&lang=zh-CN'
        # 其中fields字段为定义接受返回参数，可不传；lang为设置语言，zh-CN为中文，可以传
        res = requests.get(url)  # 发送请求
        data = json.loads(res.text)
        city = data['city']
        try:
            self.get(city)
        except Exception as e:
            self.textBrowser.setText("查询出错！")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "查询"))
        self.label.setText(_translate("MainWindow", "城市天气查询"))
        self.pushButton_2.setText(_translate("MainWindow", "本地查询"))
        self.label_2.setText(_translate("MainWindow", "城市"))

    def get(self, city):
        params = {"q": city,
                  "limit": 10,
                  "timestamp": int(time.time() * 1000),
                  "_": int(time.time() * 1000)}
        header_length = len(Headers.Header_forge_chrome)-1
        number = random.randint(0, header_length)
        headers = {
            "User-Agent": Headers.Header_forge_chrome[number]
        }
        city_response = requests.get("http://www.nmc.cn/rest/position", params=params,
                                     headers=headers)
        data = city_response.json()
        code=data['code']
        newParams = {"stationid": code,
                     "_": int(time.time() * 1000)}
        response = requests.get("http://www.nmc.cn/rest/weather", params=newParams,
                                headers=headers)
        row_data = response.json()['data']
        local = row_data['real']
        publish_time = local["publish_time"]  # 更新时间
        weather = local['weather']
        feelst = weather['feelst']  # 体感温度
        temperature = weather['temperature']  # 温度
        humidity = weather['humidity']  # 湿度
        temperatureDiff = weather['temperatureDiff']  # 温度差异
        info = weather['info']  # n天气
        now_s = "城市：{}\n今日天气--------------\n更新时间:{}\n温度：{}\n温度差异：{}\n湿度：{}\n天气：{}\n体感温度：{}\n\n".format(city,
                                                                                                       publish_time,
                                                                                                       temperature,
                                                                                                       temperatureDiff,
                                                                                                       humidity,
                                                                                                       info,
                                                                                                       feelst)

        predict = row_data['predict']
        predict_publish_time = predict['publish_time']  # 预测时间
        predict_detail = predict['detail'][1]
        predict_time = predict_detail['date']  # 时间
        day = predict_detail['day']
        day_info = day['weather']['info']  # 白天天气
        day_temperature = day['weather']['temperature']  # 白天温度
        day_direct = day['wind']['direct']  # 风向
        day_power = day['wind']['power']  # 风力
        night = predict_detail['night']
        night_info = day['weather']['info']  # 夜晚
        night_temperature = day['weather']['temperature']  # 夜晚温度
        night_direct = day['wind']['direct']  # 风向
        night_power = day['wind']['power']  # 风力

        predict_s = "明日{}天气--------------\n更新时间:{}\n白天天气：{}\n温度：{}\n风向：{}\n风力：{}\n---------------\n夜晚天气：{}\n温度：{}\n风向：{}\n风力：{}\n".format(
            predict_time, predict_publish_time,
            day_info,
            day_temperature,
            day_direct, day_power,
            night_info,
            night_temperature, night_direct, night_power)
        all_s = now_s + predict_s
        self.textBrowser.setText(all_s)


if __name__ == "__main__":
    # print(time.time())
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
